// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Xrocter.Models;

#nullable disable

namespace cis_476_project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231118032320_DatabasePopulation")]
    partial class DatabasePopulation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("cis_476_project.Models.CreditCard", b =>
                {
                    b.Property<Guid>("CardNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CVV")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IssueDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VaultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CardNumber");

                    b.HasIndex("VaultId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("cis_476_project.Models.Login", b =>
                {
                    b.Property<Guid>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VaultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginId");

                    b.HasIndex("VaultId");

                    b.ToTable("Login_Credentails");

                    b.HasData(
                        new
                        {
                            LoginId = new Guid("175eb1dc-62d0-481a-9528-50fed7f0c271"),
                            Password = "Karya99DA",
                            URL = "www.denizkaryaacikbas.com",
                            Username = "denizkarya1999",
                            VaultId = new Guid("a03669c9-8126-48ae-a876-0f5bd69bb999")
                        });
                });

            modelBuilder.Entity("cis_476_project.Models.SecurityNote", b =>
                {
                    b.Property<Guid>("SecurityNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VaultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SecurityNoteId");

                    b.HasIndex("VaultId");

                    b.ToTable("SecurityNotes");
                });

            modelBuilder.Entity("cis_476_project.Models.UserAccount", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VaultId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.HasIndex("VaultId")
                        .IsUnique();

                    b.ToTable("UserAccounts");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("49563db6-e780-44f2-ada6-f8be2e9eb834"),
                            Email = "dacikbas@umich.edu",
                            Name = "Deniz",
                            Password = "Karya99DA",
                            Surname = "Acikbas",
                            VaultId = new Guid("a03669c9-8126-48ae-a876-0f5bd69bb999")
                        });
                });

            modelBuilder.Entity("cis_476_project.Models.Vault", b =>
                {
                    b.Property<Guid>("VaultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Lock")
                        .HasColumnType("bit");

                    b.Property<bool?>("Mask")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VaultId");

                    b.ToTable("Vaults");

                    b.HasData(
                        new
                        {
                            VaultId = new Guid("a03669c9-8126-48ae-a876-0f5bd69bb999"),
                            Lock = false,
                            Mask = false,
                            Name = "Deniz`s Vault",
                            UserId = new Guid("a03669c9-8126-48ae-a876-0f5bd69bb999")
                        });
                });

            modelBuilder.Entity("cis_476_project.Models.Vault_Models.ID.DriversLicense", b =>
                {
                    b.Property<Guid>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Id_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IssuanceDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VaultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id_key");

                    b.HasIndex("VaultId");

                    b.ToTable("DriversLicenses");
                });

            modelBuilder.Entity("cis_476_project.Models.Vault_Models.ID.LocalId", b =>
                {
                    b.Property<Guid>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Id_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalAuthority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalIdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VaultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id_key");

                    b.HasIndex("VaultId");

                    b.ToTable("LocalIds");
                });

            modelBuilder.Entity("cis_476_project.Models.Vault_Models.ID.Passport", b =>
                {
                    b.Property<Guid>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country_of_Issuance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Id_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IssuanceDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VaultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id_key");

                    b.HasIndex("VaultId");

                    b.ToTable("Passports");

                    b.HasData(
                        new
                        {
                            Id_key = new Guid("e0f06fdd-0263-4900-85c5-120a2e663045"),
                            Country_of_Issuance = "Turkey",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id_Name = "Deniz`s Passport",
                            IssuanceDate = new DateTime(2023, 11, 17, 22, 23, 20, 360, DateTimeKind.Local).AddTicks(3049),
                            PassportNumber = "U1232232",
                            VaultId = new Guid("a03669c9-8126-48ae-a876-0f5bd69bb999")
                        });
                });

            modelBuilder.Entity("cis_476_project.Models.Vault_Models.ID.SSN", b =>
                {
                    b.Property<Guid>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Id_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SSNNumber")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VaultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id_key");

                    b.HasIndex("VaultId");

                    b.ToTable("SSNs");
                });

            modelBuilder.Entity("cis_476_project.Models.CreditCard", b =>
                {
                    b.HasOne("cis_476_project.Models.Vault", "Vault")
                        .WithMany("CreditCards")
                        .HasForeignKey("VaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vault");
                });

            modelBuilder.Entity("cis_476_project.Models.Login", b =>
                {
                    b.HasOne("cis_476_project.Models.Vault", "Vault")
                        .WithMany("LoginCredentials")
                        .HasForeignKey("VaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vault");
                });

            modelBuilder.Entity("cis_476_project.Models.SecurityNote", b =>
                {
                    b.HasOne("cis_476_project.Models.Vault", "Vault")
                        .WithMany("SecurityNotes")
                        .HasForeignKey("VaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vault");
                });

            modelBuilder.Entity("cis_476_project.Models.UserAccount", b =>
                {
                    b.HasOne("cis_476_project.Models.Vault", "Vault")
                        .WithOne("UserAccount")
                        .HasForeignKey("cis_476_project.Models.UserAccount", "VaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vault");
                });

            modelBuilder.Entity("cis_476_project.Models.Vault_Models.ID.DriversLicense", b =>
                {
                    b.HasOne("cis_476_project.Models.Vault", "Vault")
                        .WithMany("DriversLicenses")
                        .HasForeignKey("VaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vault");
                });

            modelBuilder.Entity("cis_476_project.Models.Vault_Models.ID.LocalId", b =>
                {
                    b.HasOne("cis_476_project.Models.Vault", "Vault")
                        .WithMany("localIDs")
                        .HasForeignKey("VaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vault");
                });

            modelBuilder.Entity("cis_476_project.Models.Vault_Models.ID.Passport", b =>
                {
                    b.HasOne("cis_476_project.Models.Vault", "Vault")
                        .WithMany("Passports")
                        .HasForeignKey("VaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vault");
                });

            modelBuilder.Entity("cis_476_project.Models.Vault_Models.ID.SSN", b =>
                {
                    b.HasOne("cis_476_project.Models.Vault", "Vault")
                        .WithMany("SSNs")
                        .HasForeignKey("VaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vault");
                });

            modelBuilder.Entity("cis_476_project.Models.Vault", b =>
                {
                    b.Navigation("CreditCards");

                    b.Navigation("DriversLicenses");

                    b.Navigation("LoginCredentials");

                    b.Navigation("Passports");

                    b.Navigation("SSNs");

                    b.Navigation("SecurityNotes");

                    b.Navigation("UserAccount")
                        .IsRequired();

                    b.Navigation("localIDs");
                });
#pragma warning restore 612, 618
        }
    }
}
